AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lince Payments Service

#Esta plantilla hay que desplegarla dos veces, una con el stage api para que cree todo y
#despues con el stage $default para que actualice el stage de la api

############################################################
#                     Parámetros                            #
############################################################
Parameters:
  AwsUserPoolId:
    Type: String

  AwsClientId:
    Type: String

  Environment:
    Type: String
    AllowedValues: [dev, live]

  PrivateSubnetOne:
    Type: String
  PrivateSubnetTwo:
    Type: String
  LambdaSecurityGroup:
    Type: String

############################################################
#                Valores que sí cambian                     #
############################################################
Mappings:
  EnvConfig:
    dev:  { DomainBase: lince.zone }
    live: { DomainBase: lince.finance }

############################################################
#                        Globals                            #
############################################################
Globals:
  Function:
    Runtime: nodejs18.x
    Architectures: [arm64]
    Timeout: 60
    MemorySize: 512
    VpcConfig:
      SubnetIds:        [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo]
      SecurityGroupIds: [!Ref LambdaSecurityGroup]
    Environment:
      Variables:
        NODE_ENV:  !Ref Environment
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
        PAYMENTS_ENFORCE_MIN_TTL: 'false'

############################################################
#                       Recursos                            #
############################################################
Resources:

  ##########################################################
  #  IAM Role                                              #
  ##########################################################
  PaymentsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SSMReadPaymentsKeys
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource: arn:aws:ssm:*:*:parameter/lince/*
        - PolicyName: KMSDecryptPayments
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: kms:Decrypt
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm
                  - !ImportValue lince-KmsKeyArn

  ##########################################################
  #        HTTP API (v2)                                   #
  ##########################################################
  PaymentsHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - !Sub ["https://app.${DB}", { DB: !FindInMap [EnvConfig, !Ref Environment, DomainBase] }]
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Csrf-Token
          - X-Refresh-Required
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
          - Origin
          - Accept
        AllowMethods: [GET, POST, PUT, PATCH, DELETE, OPTIONS]
        AllowCredentials: true
      Auth:
        #DefaultAuthorizer: CognitoJwt
        Authorizers:
          CognitoJwt:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${AwsUserPoolId}"
              audience: [!Ref AwsClientId]
            IdentitySource:
              #- "$request.cookie.accessToken"
              - "$request.header.Authorization"

  ##########################################################
  #        Lambda                                          #
  ##########################################################
  PaymentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub lince-payments-${Environment}
      Role:         !GetAtt PaymentsFunctionRole.Arn
      CodeUri:      .
      Handler:      dist/lambdaHandler.handler
      Events:
        PublicProxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref PaymentsHttpApi
            Path:  /payments/{proxy+}
            Method: ANY
            #Auth:
            #  Authorizer: CognitoJwt

  ##########################################################
  #        Custom Domain                                   #
  ##########################################################
  #PaymentsHttpApiStage:
  #  Type: AWS::ApiGatewayV2::Stage
  #  Properties:
  #    ApiId: !Ref PaymentsHttpApi
  #    StageName: api
  #    AutoDeploy: true
  
  PaymentsDomainV2:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub
        - payments.${DB}
        - { DB: !FindInMap [EnvConfig, !Ref Environment, DomainBase] }
      DomainNameConfigurations:
        - CertificateArn: !ImportValue lince-WildcardCertArn
          EndpointType: REGIONAL

  PaymentsMappingV2:
    DependsOn: PaymentsHttpApi
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref PaymentsDomainV2
      ApiId:      !Ref PaymentsHttpApi
      #Stage:      !Ref PaymentsHttpApiStage
      Stage: $default

############################################################
#                       Outputs                             #
############################################################
Outputs:
  PaymentsApiId:
    Description: HTTP API ID (payments)
    Value: !Ref PaymentsHttpApi
    Export:
      Name: !Sub LincePayments-${Environment}-ApiId

  PaymentsUrl:
    Description: Endpoint HTTP API (regional)
    Value: !Sub https://${PaymentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com
    Export:
      Name: !Sub LincePayments-${Environment}-Url

  PaymentsCustomDomain:
    Description: URL con dominio personalizado
    Value: !Sub
      - "https://payments.${DomainBase}"
      - { DomainBase: !FindInMap [EnvConfig, !Ref Environment, DomainBase] }
    Export:
      Name: !Sub "LincePayments-${Environment}-CustomDomain"
