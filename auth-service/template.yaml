AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lince Auth Service

#Esta plantilla hay que desplegarla dos veces, una con el stage api para que cree todo y
#despues con el stage $default para que actualice el stage de la api

############################################################
#                     Parámetros                            #
############################################################
Parameters:
  # Entorno lógico (dev | live)
  Environment:
    Type: String
    AllowedValues: [dev, live]

  # Red / VPC comunes
  PrivateSubnetOne:
    Type: String
    Description: 'ID of private subnet 1'
  PrivateSubnetTwo:
    Type: String
    Description: 'ID of private subnet 2'
  LambdaSecurityGroup:
    Type: String
    Description: 'Security Group ID for Lambdas in the VPC'

  # Dependencias externas
  UserPoolArnParam:
    Type: String
    Description: "ARN for user pool"

  RedisUrlParam:
    Type: String
    Description: 'URL of Redis endpoint (e.g. from SSM)'

  UsersTable:
    Type: String
    Default: "Users"
    Description: "Users table name"

  AwsUserPoolId:              
    Type: String
    Description: "Cognito User-Pool ID"
    
  AwsClientId:              
    Type: String
    Description: "App-client ID del User-Pool"

Mappings:
  EnvConfig:
    dev:
      DomainBase: lince.zone
    live:
      DomainBase: lince.finance

Conditions:
  IsLive: !Equals [ !Ref Environment, live ]

############################################################
#                      Globals                              #
############################################################
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 60
    MemorySize: 512
    Architectures: [arm64]
    VpcConfig:
      SubnetIds: [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo]
      SecurityGroupIds: [!Ref LambdaSecurityGroup]
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
        REDIS_URL: !Ref RedisUrlParam

############################################################
#                       Recursos                            #
############################################################
Resources:

  ##########################################################
  #               Permisos de la Lambda                    #
  ##########################################################
  AuthFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

      Policies:
        - PolicyName: CognitoIdpPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:InitiateAuth
                  - cognito-idp:ResendConfirmationCode
                  - cognito-idp:ConfirmSignUp
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:ForgotPassword
                  - cognito-idp:ConfirmForgotPassword
                  - cognito-idp:ChangePassword
                  - cognito-idp:AssociateSoftwareToken
                  - cognito-idp:VerifySoftwareToken
                  - cognito-idp:SetUserMFAPreference
                  - cognito-idp:RespondToAuthChallenge
                  - cognito-idp:GetUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminInitiateAuth
                Resource: !Ref UserPoolArnParam

        - PolicyName: DynamoDBCrudPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Invitations"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Invitations/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*"


        - PolicyName: SSMReadAllParameters
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                Resource: "arn:aws:ssm:eu-west-1:*:parameter/*"

        - PolicyName: KMSDecryptPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: kms:Decrypt
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
                  - !ImportValue lince-KmsKeyArn


  ##########################################################
  #                     API Gateway                        #
  ##########################################################

  AuthHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - !Sub ["https://app.${DB}", { DB: !FindInMap [EnvConfig, !Ref Environment, DomainBase] }]
        AllowHeaders:                      
          - Content-Type
          - Authorization
          - X-XSRF-TOKEN       
          - X-Csrf-Token        
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
          - Origin
          - Accept
          - X-Requested-With
        AllowMethods: [GET, POST, PUT, PATCH, DELETE, OPTIONS]
        AllowCredentials: true
        MaxAge: 600
      Auth:
        #DefaultAuthorizer: CognitoJwt
        Authorizers:
          CognitoJwt:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${AwsUserPoolId}"
              audience: [!Ref AwsClientId]
            IdentitySource:
              #- "$request.cookie.accessToken"
              - "$request.header.Authorization"

  ##########################################################
  #                 Función principal                      #
  ##########################################################
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:                   
      FunctionName: !Sub 'lince-auth-${Environment}'
      CodeUri: .
      Handler: dist/lambdaHandler.handler
      Role: !GetAtt AuthFunctionRole.Arn
      #ProvisionedConcurrencyConfig:
      #  !If
      #    - IsLive
      #    - ProvisionedConcurrentExecutions: 3 
      #    - !Ref 'AWS::NoValue'
      Events:                      
        PublicRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref AuthHttpApi
            Path: /{proxy+}      
            Method: ANY
            #Auth:
            #  Authorizer: NONE
        PublicProxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref AuthHttpApi
            Path:  /auth/{proxy+}
            Method: ANY
            #Auth:
            #  Authorizer: NONE  
        UserRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref AuthHttpApi
            Path: /user
            Method: ANY       
        PrivateProxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref AuthHttpApi
            Path:  /user/{proxy+}
            Method: ANY

      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable


  #AuthHttpApiStage:
  #  Type: AWS::ApiGatewayV2::Stage
  #  Properties:
  #    ApiId: !Ref AuthHttpApi
  #    StageName: api
  #    AutoDeploy: true

  ##########################################################
  #              Dominio personalizado                     #
  ##########################################################

  AuthDomainV2:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub
        - "auth.${DB}"
        - { DB: !FindInMap [EnvConfig, !Ref Environment, DomainBase] }
      DomainNameConfigurations:
        - CertificateArn: !ImportValue lince-WildcardCertArn
          EndpointType: REGIONAL

  # --------------- API MAPPING --------------
  AuthMappingV2:
    DependsOn: AuthHttpApi
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref AuthDomainV2
      ApiId: !Ref AuthHttpApi
      #Stage: !Ref AuthHttpApiStage
      Stage: $default

############################################################
#                       Salidas                             #
############################################################
Outputs:
  AuthApiId:
    Description: "API Gateway ID for el servicio Auth"
    Value: !Ref AuthHttpApi
    Export:
      Name: !Sub "LinceAuth-${Environment}-ApiId"

  CustomDomainUrl:
    Description: "URL del dominio personalizado"
    Value: !Sub
      - 'https://auth.${DB}'
      - { DB: !FindInMap [EnvConfig, !Ref Environment, DomainBase] }
